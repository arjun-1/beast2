package test.beast.evolution.substmodel;

import beast.core.Description;
import beast.core.parameter.RealParameter;
import beast.evolution.substitutionmodel.SainudiinStepWise;
import beast.evolution.substitutionmodel.Frequencies;
import junit.framework.TestCase;


@Description("Test SainudiinStepWise matrix exponentiation")
public class SainudiinStepWiseTest extends TestCase {

    public interface Instance {
        Double[] getPi();
        
        Double getRb();
        Double getIeq();
        Double getA1();
        Double getNrOfStates();

        double getDistance();

        double[] getExpectedResult();
    }


    protected Instance test0 = new Instance() {
        @Override
        public Double[] getPi() {
            return new Double[]{0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667,0.066666667};
        }

        @Override
		public Double getRb() {
            return 0.5;
        }
        @Override
        public Double getIeq() {
            return 5.5;
        }
 
        @Override
        public Double getA1() {
            return 1.0;
        }
        @Override
        public Double getNrOfStates() {
            return 15.0;
        }

        @Override
		public double getDistance() {
            return 0.5;
        }

        @Override
		public double[] getExpectedResult() {
            return new double[]{
                0.7712049992483787,0.1759604269828351,0.04092504261836892,0.009312941840182765,0.002051533507945971,0.0004352545496527480,0.00008863030759412366,0.00001727340180607383,0.000003213987907003114,0.0000005695974383211285,0.00000009593638266511984,0.00000001532365083440207,0.000000002316646695334811,0.0000000003319912433624663,0.00000000004921772737197820,0.2272447768976175,0.4636292434471643,0.2096080635277464,0.07127620686167149,0.02093536375204695,0.005556393950186245,0.001358875355274594,0.0003091971786838771,0.00006578609006764018,0.00001312127443312079,0.000002456091633101345,0.0000004315682342865693,0.00000007117600139733390,0.00000001105678316975782,0.000000001772454808729872,0.05587513613611588,0.2215942754420773,0.3670761705462551,0.2186300631252086,0.09200147262917793,0.03181460497786169,0.009591473441968489,0.002594506476237526,0.0006396446640125788,0.0001450399216073987,0.00003041323383831671,0.000005916694055087359,0.000001070167144012726,0.0000001810418918644231,0.00000003150254762089582,0.01304101706902055,0.07728411700725064,0.2242358250191124,0.3126310518655922,0.2127801317288866,0.1022835636660033,0.03956577542621765,0.01307308291709952,0.003808356299343366,0.0009963153368207896,0.0002367423400448510,0.00005146491661003311,0.00001028655733989805,0.000001907592429234989,0.0000003622582292803659,0.003014786177797317,0.02382207069023709,0.09902462940494197,0.2232977780251542,0.2783005239019112,0.2015789970349093,0.1051709982837211,0.04387781012869796,0.01546155434032488,0.004748534435309429,0.001295795498103925,0.0003181110467470318,0.00007087076063080167,0.00001451444948567987,0.000003025822028583017,0.0007032760905483536,0.006951790254967252,0.03765126869411847,0.1180222287682859,0.2216409039479736,0.2543705666231931,0.1885293411120837,0.1031191630602223,0.04515720488953460,0.01660975410975539,0.005285308880836024,0.001482976523829698,0.0003718664998212325,0.00008481779280324242,0.00001953275202750067,0.0001670750422369150,0.001983490124483079,0.01324296397787253,0.05326285380834577,0.1349110177656928,0.2199508979640977,0.2358240667379358,0.1747609030656828,0.09780402618048203,0.04403476610826765,0.01661880095310389,0.005401446049017918,0.001541263399999970,0.0003952233961620854,0.0001012054266189678,0.00004061399947447477,0.0005629301413678285,0.004468103128456427,0.02195084921591384,0.07020449620591665,0.1500564713064925,0.2179780888562102,0.2198596747989620,0.1605571505207630,0.09034290681626939,0.04115604606243102,0.01572018471173025,0.005166110773164273,0.001505004311621415,0.0004313691512259183,0.00001012631257842894,0.0001604952794027661,0.001476102167895956,0.008568801673522565,0.03314990904216871,0.08805451101353773,0.1634686593495798,0.2151487658792387,0.2048196956444251,0.1459636720790051,0.08152307188749618,0.03712440373824557,0.01423102304732605,0.004763226123065098,0.001537536762512759,0.000002592246081513834,0.00004623866804785675,0.0004834664053579956,0.003238026825302883,0.01470584181949070,0.04678308629954430,0.1063101106259031,0.1748655973822682,0.2108365441896663,0.1897260748526036,0.1310574378014351,0.07202089317487244,0.03260878654348553,0.01268271172274648,0.004632591443194976,0.0000006814357771747482,0.00001350850398205747,0.0001582248670802346,0.001200861594912632,0.006263255931695119,0.02323429140881739,0.06261984026968484,0.1243304064968308,0.1837871053501529,0.2045479193654454,0.1741858311637959,0.1162700108797230,0.06283303944229576,0.02867815983522926,0.01187686345457862,0.0000001838838100128274,0.000004010068709909600,0.00005200330016723601,0.0004410298117047943,0.002597658738608603,0.01101369355847393,0.03438444079028923,0.08023077869848545,0.1413948665858002,0.1899028794398267,0.1964297965536556,0.1589537303051065,0.1030983863562561,0.05551059042509061,0.02598595148401591,0.00000005090739416866229,0.000001211088121182276,0.00001722436501876210,0.0001614234183723446,0.001059766664325733,0.005057379965102260,0.01796671188762422,0.04828218235633397,0.09925447407083855,0.1574517528554992,0.1943871432464728,0.1887955193657015,0.1464854422782652,0.09260882740346012,0.04847089012747066,0.00000001449624851871765,0.0000003738340768916560,0.000005790000780950907,0.00005948260974194535,0.0004312723988595270,0.002292099308996134,0.009154662112097955,0.02794916629490820,0.06601203258416376,0.1216838434845818,0.1762944683631358,0.2019870830710117,0.1840180062691724,0.1336096311451839,0.07650207402704097,0.000000004637713606671072,0.0000001293238538241847,0.000002174195500411999,0.00002437676424634017,0.0001940206027305466,0.001139103727538541,0.005058908759129300,0.01728755482179885,0.04598336907571229,0.09591757078428124,0.1575587552077093,0.2040514790346388,0.2078463029328076,0.1650922103734093,0.09984403975893036};
        }
    };

    Instance[] all = {test0};

    public void testSainudiinStepWise() throws Exception {
        for (Instance test : all) {

            RealParameter f = new RealParameter(test.getPi());

            Frequencies freqs = new Frequencies();
            freqs.initByName("frequencies", f, "estimate", false);

            SainudiinStepWise sainudiinstepwise = new SainudiinStepWise();
            sainudiinstepwise.setNrOfStates(15);
            sainudiinstepwise.initByName("rb", test.getRb().toString(),
                "ieq", test.getIeq().toString(),
                "a1", test.getA1().toString());

            double distance = test.getDistance();

            double[] mat = new double[15 * 15];
            sainudiinstepwise.getTransitionProbabilities(null, distance, 0, 1, mat);
            final double[] result = test.getExpectedResult();

            for (int k = 0; k < mat.length; ++k) {
                assertEquals(mat[k], result[k], 1e-12);
                System.out.println(k + " : " + (mat[k] - result[k]));
            }
        }
    }
}